{
  "gear": {
    "name": "hcp-struct",
    "label": "HCP: Structural Preprocessing Pipeline",
    "description": "Runs the structural preprocessing steps of the Human Connectome Project Minimal Preprocessing Pipeline, described in Glasser et al. 2013. Currently this includes v4.0-alpha release of PreFreeSurfer, FreeSurfer, and PostFreeSurfer pipelines. This Gear also generates some helpful QC images. NOTE: This Gear is a prerequisite for other Gears in the HCP suite. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
    "author": "Human Connectome Project",
    "maintainer": "Flywheel <support@flywheel.io>",
    "license": "Other",
    "url": "https://github.com/Washington-University/Pipelines",
    "source": "https://github.com/flywheel-apps/hcp-struct",
    "cite": "Glasser M. F., Sotiropoulos S. N., Wilson J. A., Coalson T. S., Fischl B., Andersson J. L., … Consortium, W. U.-M. H. (2013). The minimal preprocessing pipelines for the Human Connectome Project. NeuroImage, 80, 105–124.",
    "version": "1.0.1_4.0.1",
    "custom": {
      "docker-image": "flywheel/hcp-struct:1.0.1_4.0.1",
      "gear-builder": {
        "category": "analysis",
        "image": "flywheel/hcp-struct:1.0.1_4.0.1"
      },
      "flywheel": {
        "suite": "Human Connectome Project"
      }
    },
    "inputs": {
      "api-key": {
        "base": "api-key"
      },
      "T1": {
        "description": "T1-weighted anatomical NIfTI file",
        "base": "file",
        "type": {
          "enum": [
            "nifti"
          ]
        }
      },
      "T2": {
        "description": "T2-weighted anatomical NIfTI file",
        "base": "file",
        "type": {
          "enum": [
            "nifti"
          ]
        }
      },
      "FreeSurferLicense": {
        "description": "FreeSurfer license.txt file",
        "base": "file",
        "optional": true
      },
      "GradientCoeff": {
        "description": "Scanner gradient nonlinearity coefficient file",
        "base": "file",
        "optional": true
      },
      "SpinEchoPositive": {
        "description": "Spin echo field map for correcting T1w and T2w (Positive phase-encode, ie: R>>L or P>>A)",
        "base": "file",
        "type": {
          "enum": [
            "nifti"
          ]
        },
        "optional": true
      },
      "SpinEchoNegative": {
        "description": "Spin echo field map for correcting T1w and T2w (Negative phase-encode, ie: L>>R or A>>P)",
        "base": "file",
        "type": {
          "enum": [
            "nifti"
          ]
        },
        "optional": true
      },
      "SiemensGREMagnitude": {
        "description": "B0 GRE field map magnitude from a Siemens scanner (Must also provide SiemensGREPhase)",
        "base": "file",
        "type": {
          "enum": [
            "nifti"
          ]
        },
        "optional": true
      },
      "SiemensGREPhase": {
        "description": "B0 GRE field map phase from a Siemens scanner (Must also provide SiemensGREMagnitude)",
        "base": "file",
        "type": {
          "enum": [
            "nifti"
          ]
        },
        "optional": true
      }
    },
    "config": {
      "save-on-error": {
        "type": "boolean",
        "default": false,
        "description": "Set to 'True' to save output on error."
      },
      "Subject": {
        "type": "string",
        "description": "Subject ID (use to override session subject id)",
        "optional": true
      },
      "FREESURFER_LICENSE": {
        "description": "FreeSurfer license as space-separated string.",
        "type": "string",
        "optional": true
      },
      "RegName": {
        "type": "string",
        "enum": [
          "MSMSulc",
          "FS"
        ],
        "default": "MSMSulc",
        "description": "Surface registration type: either 'FS' (freesurfer) or 'MSMSulc' (HCP default)"
      },
      "BrainSize": {
        "type": "integer",
        "default": 150,
        "description": "Brain size in mm (in Superior-Inferior axis), typically 150 (default) for adults"
      },
      "TemplateSize": {
        "type": "string",
        "default": "0.8mm",
        "description": "Voxel size of HCP anatomical template. Best if matches input. (Options = 0.7mm, 0.8mm (default), 1mm)"
      },
      "StructuralUnwarpDirection": {
        "description": "Readout direction for structural scans ( 'x', 'x-', 'y', 'y-', 'z', 'z-' ). HCP default = 'z'",
        "default": "z",
        "type": "string",
        "enum": [
          "x",
          "x-",
          "y",
          "y-",
          "z",
          "z-"
        ]
      },
      "aseg_csv": {
        "type": "boolean",
        "default": true,
        "description": "Write aseg stats to a csv file and analysis metadata."
      },
      "dry-run": {
        "type": "boolean",
        "default": false,
        "description": "Log all commands, but do not execute."
      }
    },
    "command": "/flywheel/v0/run.py"
  },
  "exchange": {
    "git-commit": "dc9aea25b6efbca6ae95be424a6e49b5ce936bf4",
    "rootfs-hash": "sha384:0f427033f774087a8c58bed35a36c79f6c689cf80ee7f45b806bfff1d5e45e417cdfeac1d5491cf9ede6e95033b977f4",
    "rootfs-url": "https://storage.googleapis.com/flywheel-exchange/flywheel-hcp-struct-sha384-0f427033f774087a8c58bed35a36c79f6c689cf80ee7f45b806bfff1d5e45e417cdfeac1d5491cf9ede6e95033b977f4.tgz"
  },
  "invocation-schema": {
    "title": "Invocation manifest for HCP: Structural Preprocessing Pipeline",
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "properties": {
      "config": {
        "type": "object",
        "properties": {
          "save-on-error": {
            "type": "boolean",
            "default": false
          },
          "Subject": {
            "type": "string"
          },
          "FREESURFER_LICENSE": {
            "type": "string"
          },
          "RegName": {
            "type": "string",
            "enum": [
              "MSMSulc",
              "FS"
            ],
            "default": "MSMSulc"
          },
          "BrainSize": {
            "type": "integer",
            "default": 150
          },
          "TemplateSize": {
            "type": "string",
            "default": "0.8mm"
          },
          "StructuralUnwarpDirection": {
            "default": "z",
            "type": "string",
            "enum": [
              "x",
              "x-",
              "y",
              "y-",
              "z",
              "z-"
            ]
          },
          "aseg_csv": {
            "type": "boolean",
            "default": true
          },
          "dry-run": {
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "save-on-error",
          "RegName",
          "BrainSize",
          "TemplateSize",
          "StructuralUnwarpDirection",
          "aseg_csv",
          "dry-run"
        ]
      },
      "inputs": {
        "type": "object",
        "properties": {
          "api-key": {
            "type": "object"
          },
          "T1": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "nifti"
                ]
              }
            }
          },
          "T2": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "nifti"
                ]
              }
            }
          },
          "FreeSurferLicense": {
            "type": "object",
            "properties": {}
          },
          "GradientCoeff": {
            "type": "object",
            "properties": {}
          },
          "SpinEchoPositive": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "nifti"
                ]
              }
            }
          },
          "SpinEchoNegative": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "nifti"
                ]
              }
            }
          },
          "SiemensGREMagnitude": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "nifti"
                ]
              }
            }
          },
          "SiemensGREPhase": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "nifti"
                ]
              }
            }
          }
        },
        "required": [
          "api-key",
          "T1",
          "T2"
        ]
      }
    },
    "required": [
      "config",
      "inputs"
    ]
  }
}
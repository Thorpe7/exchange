{
  "gear": {
    "author": "Human Connectome Project",
    "cite": "Glasser M. F., Sotiropoulos S. N., Wilson J. A., Coalson T. S., Fischl B., Andersson J. L., … Consortium, W. U.-M. H. (2013). The minimal preprocessing pipelines for the Human Connectome Project. NeuroImage, 80, 105–124.",
    "command": "/flywheel/v0/run.py",
    "config": {
      "AnatomyRegDOF": {
        "default": 6,
        "description": "Degrees of freedom for Diffusion->Anat registration. 6 (default) = rigid body, when all data is from same scanner. 12 = full affine, recommended for 7T fMRI->3T anatomy",
        "enum": [
          6,
          12
        ],
        "type": "integer"
      },
      "DWIName": {
        "default": "Diffusion",
        "description": "Output name for preprocessed data. *Note: Spaces will be replaced with '_'.",
        "type": "string"
      },
      "FREESURFER_LICENSE": {
        "description": "FreeSurfer license as space-separated string.",
        "optional": true,
        "type": "string"
      },
      "dry-run": {
        "default": false,
        "description": "Log all commands, but do not execute.",
        "type": "boolean"
      },
      "save-on-error": {
        "default": false,
        "description": "Set to 'True' to save output on error.",
        "type": "boolean"
      }
    },
    "custom": {
      "docker-image": "flywheel/hcp-diff:1.0.4_4.3.0",
      "flywheel": {
        "suite": "Human Connectome Project"
      },
      "gear-builder": {
        "category": "analysis",
        "image": "flywheel/hcp-diff:1.0.4_4.3.0"
      }
    },
    "description": "Runs the diffusion preprocessing steps of the Human Connectome Project Minimal Preprocessing Pipeline described in Glasser et al. 2013. This includes correction for EPI distortion (using FSL topup), correction for motion and eddy-current distortion (using FSL eddy), and registration to subject anatomy. In addition, this Gear generates a QC mosaic. NOTE: This Gear requires that the HCP-Structural Gear has been run - the output of which is used here. This Gear allows input of up to 4 diffusion acquisitions.",
    "environment": {
      "REQUESTS_CA_BUNDLE": "/etc/ssl/certs/ca-certificates.crt"
    },
    "inputs": {
      "DWINegativeBval": {
        "base": "file",
        "description": "Diffusion .bval file (Negative phase-encode, ie: L>>R or A>>P)",
        "type": {
          "enum": [
            "bval"
          ]
        }
      },
      "DWINegativeBval2": {
        "base": "file",
        "description": "Diffusion .bval file (Negative phase-encode, ie: L>>R or A>>P)",
        "optional": true,
        "type": {
          "enum": [
            "bval"
          ]
        }
      },
      "DWINegativeBval3": {
        "base": "file",
        "description": "Diffusion .bval file (Negative phase-encode, ie: L>>R or A>>P)",
        "optional": true,
        "type": {
          "enum": [
            "bval"
          ]
        }
      },
      "DWINegativeBval4": {
        "base": "file",
        "description": "Diffusion .bval file (Negative phase-encode, ie: L>>R or A>>P)",
        "optional": true,
        "type": {
          "enum": [
            "bval"
          ]
        }
      },
      "DWINegativeBvec": {
        "base": "file",
        "description": "Diffusion .bvec file (Negative phase-encode, ie: L>>R or A>>P)",
        "type": {
          "enum": [
            "bvec"
          ]
        }
      },
      "DWINegativeBvec2": {
        "base": "file",
        "description": "Diffusion .bvec file (Negative phase-encode, ie: L>>R or A>>P)",
        "optional": true,
        "type": {
          "enum": [
            "bvec"
          ]
        }
      },
      "DWINegativeBvec3": {
        "base": "file",
        "description": "Diffusion .bvec file (Negative phase-encode, ie: L>>R or A>>P)",
        "optional": true,
        "type": {
          "enum": [
            "bvec"
          ]
        }
      },
      "DWINegativeBvec4": {
        "base": "file",
        "description": "Diffusion .bvec file (Negative phase-encode, ie: L>>R or A>>P)",
        "optional": true,
        "type": {
          "enum": [
            "bvec"
          ]
        }
      },
      "DWINegativeData": {
        "base": "file",
        "description": "Diffusion time series (Negative phase-encode, ie: L>>R or A>>P)",
        "type": {
          "enum": [
            "nifti"
          ]
        }
      },
      "DWINegativeData2": {
        "base": "file",
        "description": "Diffusion time series (Negative phase-encode, ie: L>>R or A>>P)",
        "optional": true,
        "type": {
          "enum": [
            "nifti"
          ]
        }
      },
      "DWINegativeData3": {
        "base": "file",
        "description": "Diffusion time series (Negative phase-encode, ie: L>>R or A>>P)",
        "optional": true,
        "type": {
          "enum": [
            "nifti"
          ]
        }
      },
      "DWINegativeData4": {
        "base": "file",
        "description": "Diffusion time series (Negative phase-encode, ie: L>>R or A>>P)",
        "optional": true,
        "type": {
          "enum": [
            "nifti"
          ]
        }
      },
      "DWIPositiveBval": {
        "base": "file",
        "description": "Diffusion .bval file (Positive phase-encode, ie: R>>L or P>>A)",
        "type": {
          "enum": [
            "bval"
          ]
        }
      },
      "DWIPositiveBval2": {
        "base": "file",
        "description": "Diffusion .bval file (Positive phase-encode, ie: R>>L or P>>A)",
        "optional": true,
        "type": {
          "enum": [
            "bval"
          ]
        }
      },
      "DWIPositiveBval3": {
        "base": "file",
        "description": "Diffusion .bval file (Positive phase-encode, ie: R>>L or P>>A)",
        "optional": true,
        "type": {
          "enum": [
            "bval"
          ]
        }
      },
      "DWIPositiveBval4": {
        "base": "file",
        "description": "Diffusion .bval file (Positive phase-encode, ie: R>>L or P>>A)",
        "optional": true,
        "type": {
          "enum": [
            "bval"
          ]
        }
      },
      "DWIPositiveBvec": {
        "base": "file",
        "description": "Diffusion .bvec file (Positive phase-encode, ie: R>>L or P>>A)",
        "type": {
          "enum": [
            "bvec"
          ]
        }
      },
      "DWIPositiveBvec2": {
        "base": "file",
        "description": "Diffusion .bvec file (Positive phase-encode, ie: R>>L or P>>A)",
        "optional": true,
        "type": {
          "enum": [
            "bvec"
          ]
        }
      },
      "DWIPositiveBvec3": {
        "base": "file",
        "description": "Diffusion .bvec file (Positive phase-encode, ie: R>>L or P>>A)",
        "optional": true,
        "type": {
          "enum": [
            "bvec"
          ]
        }
      },
      "DWIPositiveBvec4": {
        "base": "file",
        "description": "Diffusion .bvec file (Positive phase-encode, ie: R>>L or P>>A)",
        "optional": true,
        "type": {
          "enum": [
            "bvec"
          ]
        }
      },
      "DWIPositiveData": {
        "base": "file",
        "description": "Diffusion time series (Positive phase-encode, ie: R>>L or P>>A)",
        "type": {
          "enum": [
            "nifti"
          ]
        }
      },
      "DWIPositiveData2": {
        "base": "file",
        "description": "Diffusion time series (Positive phase-encode, ie: R>>L or P>>A)",
        "optional": true,
        "type": {
          "enum": [
            "nifti"
          ]
        }
      },
      "DWIPositiveData3": {
        "base": "file",
        "description": "Diffusion time series (Positive phase-encode, ie: R>>L or P>>A)",
        "optional": true,
        "type": {
          "enum": [
            "nifti"
          ]
        }
      },
      "DWIPositiveData4": {
        "base": "file",
        "description": "Diffusion time series (Positive phase-encode, ie: R>>L or P>>A)",
        "optional": true,
        "type": {
          "enum": [
            "nifti"
          ]
        }
      },
      "FreeSurferLicense": {
        "base": "file",
        "description": "FreeSurfer license.txt file",
        "optional": true
      },
      "GradientCoeff": {
        "base": "file",
        "description": "Scanner gradient nonlinearity coefficient file",
        "optional": true
      },
      "StructZip": {
        "base": "file",
        "description": "Zipped output from HCP-Struct pipeline",
        "type": {
          "enum": [
            "archive"
          ]
        }
      },
      "api-key": {
        "base": "api-key"
      }
    },
    "label": "HCP: Diffusion Preprocessing Pipeline",
    "license": "Other",
    "maintainer": "Flywheel <support@flywheel.io>",
    "name": "hcp-diff",
    "source": "https://github.com/flywheel-apps/hcp-diff",
    "url": "https://github.com/Washington-University/Pipelines",
    "version": "1.0.4_4.3.0"
  },
  "exchange": {
    "git-commit": "25f4ff1553f69dc8f1054c83dee5e90c48cad6b3",
    "rootfs-hash": "sha384:92bc1ff2faabd57ac03f713f52ecb3efcee46f69232705857e86c0fe53b6de8a7d1605f98a8834c48e2e3e7146955c60",
    "rootfs-url": "https://storage.googleapis.com/flywheel-exchange/flywheel-hcp-diff-sha384-92bc1ff2faabd57ac03f713f52ecb3efcee46f69232705857e86c0fe53b6de8a7d1605f98a8834c48e2e3e7146955c60.tgz"
  },
  "invocation-schema": {
    "title": "Invocation manifest for HCP: Diffusion Preprocessing Pipeline",
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "properties": {
      "config": {
        "type": "object",
        "properties": {
          "AnatomyRegDOF": {
            "default": 6,
            "enum": [
              6,
              12
            ],
            "type": "integer"
          },
          "DWIName": {
            "default": "Diffusion",
            "type": "string"
          },
          "FREESURFER_LICENSE": {
            "type": "string"
          },
          "dry-run": {
            "default": false,
            "type": "boolean"
          },
          "save-on-error": {
            "default": false,
            "type": "boolean"
          }
        },
        "required": [
          "AnatomyRegDOF",
          "DWIName",
          "dry-run",
          "save-on-error"
        ]
      },
      "inputs": {
        "type": "object",
        "properties": {
          "DWINegativeBval": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "bval"
                ]
              }
            }
          },
          "DWINegativeBval2": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "bval"
                ]
              }
            }
          },
          "DWINegativeBval3": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "bval"
                ]
              }
            }
          },
          "DWINegativeBval4": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "bval"
                ]
              }
            }
          },
          "DWINegativeBvec": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "bvec"
                ]
              }
            }
          },
          "DWINegativeBvec2": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "bvec"
                ]
              }
            }
          },
          "DWINegativeBvec3": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "bvec"
                ]
              }
            }
          },
          "DWINegativeBvec4": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "bvec"
                ]
              }
            }
          },
          "DWINegativeData": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "nifti"
                ]
              }
            }
          },
          "DWINegativeData2": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "nifti"
                ]
              }
            }
          },
          "DWINegativeData3": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "nifti"
                ]
              }
            }
          },
          "DWINegativeData4": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "nifti"
                ]
              }
            }
          },
          "DWIPositiveBval": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "bval"
                ]
              }
            }
          },
          "DWIPositiveBval2": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "bval"
                ]
              }
            }
          },
          "DWIPositiveBval3": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "bval"
                ]
              }
            }
          },
          "DWIPositiveBval4": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "bval"
                ]
              }
            }
          },
          "DWIPositiveBvec": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "bvec"
                ]
              }
            }
          },
          "DWIPositiveBvec2": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "bvec"
                ]
              }
            }
          },
          "DWIPositiveBvec3": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "bvec"
                ]
              }
            }
          },
          "DWIPositiveBvec4": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "bvec"
                ]
              }
            }
          },
          "DWIPositiveData": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "nifti"
                ]
              }
            }
          },
          "DWIPositiveData2": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "nifti"
                ]
              }
            }
          },
          "DWIPositiveData3": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "nifti"
                ]
              }
            }
          },
          "DWIPositiveData4": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "nifti"
                ]
              }
            }
          },
          "FreeSurferLicense": {
            "type": "object",
            "properties": {}
          },
          "GradientCoeff": {
            "type": "object",
            "properties": {}
          },
          "StructZip": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "archive"
                ]
              }
            }
          },
          "api-key": {
            "type": "object"
          }
        },
        "required": [
          "DWINegativeBval",
          "DWINegativeBvec",
          "DWINegativeData",
          "DWIPositiveBval",
          "DWIPositiveBvec",
          "DWIPositiveData",
          "StructZip",
          "api-key"
        ]
      }
    },
    "required": [
      "config",
      "inputs"
    ]
  }
}

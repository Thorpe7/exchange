{
  "name": "dcm2niix",
  "label": "dcm2niix: DICOM to NIfTI conversion",
  "description": "Implementation of Chris Rorden's dcm2niix tool for converting DICOM (or PAR/REC) to NIfTI (or NRRD).",
  "version": "2.0.0_1.0.20220720",
  "author": "Flywheel",
  "maintainer": "Flywheel <support@flywheel.io>",
  "url": "https://github.com/rordenlab/dcm2niix",
  "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/dcm2niix/",
  "cite": "dcm2niix doi: 10.1016/j.jneumeth.2016.03.001",
  "license": "Other",
  "custom": {
    "gear-builder": {
      "category": "converter",
      "image": "flywheel/dcm2niix:2.0.0_1.0.20220720"
    },
    "flywheel": {
      "suite": "Conversion"
    },
    "license": {
      "main": {
        "name": "Other",
        "url": "https://github.com/rordenlab/dcm2niix/blob/v1.0.20220720/license.txt"
      }
    }
  },
  "inputs": {
    "dcm2niix_input": {
      "base": "file",
      "description": "Main input file for the Gear. This can be either a DICOM archive ('<dicom>.zip'), a PAR/REC archive ('<parrec>.zip'), or a single PAR file ('image.PAR' or 'image.par').",
      "optional": false,
      "type": {
        "enum": [
          "dicom",
          "parrec"
        ]
      }
    },
    "rec_file_input": {
      "base": "file",
      "description": "If dcm2niix_input is a single PAR file, the corresponding REC file ('image.REC' or 'image.rec') for one PAR/REC file pair as inputs to the Gear.",
      "optional": true,
      "type": {
        "enum": [
          "parrec"
        ]
      }
    },
    "api-key": {
      "base": "api-key",
      "read-only": true
    }
  },
  "config": {
    "anonymize_bids": {
      "description": "Anonymize BIDS. Options: true (default), false. 'bids_sidecar' config option must be enabled (i.e., 'y' or 'o' options).",
      "type": "boolean",
      "default": true
    },
    "bids_sidecar": {
      "description": "Output BIDS sidecar in JSON format. Options are 'y'=yes, 'n'=no (default), 'o'=only (whereby no NIfTI file will be generated). Note: bids_sidecar is always invoked when running dcm2niix to be used as metadata. User configuration preference is handled after acquiring metadata.",
      "type": "string",
      "default": "y",
      "enum": [
        "y",
        "n",
        "o"
      ]
    },
    "coil_combine": {
      "description": "For sequences with individual coil data, saved as individual volumes, this option will save a NIfTI file with ONLY the combined coil data (i.e., the last volume). Options: true, false (default). WARNING: Expert Option. We make no effort to check for independent coil data; we trust that you know what you are asking for if you have selected this option.",
      "type": "boolean",
      "default": false
    },
    "comment": {
      "description": "If non-empty, store comment as NIfTI aux_file. Options: non-empty string, 24 characters maximum. Note: The 24 character comment is placed in (1) all NIfTI output files in the aux_file variable. You can use fslhdr to access the NIfTI header data and see this comment; and (2) all JSON files (i.e., BIDS sidecars), which means the comment is stored as metadata for all associated output files and would be included in the 'bids_sidecar' file, if invoked.",
      "type": "string",
      "default": ""
    },
    "compress_images": {
      "description": "Gzip compress images. Options: 'y'=yes (default), 'i'=internal, 'n'=no, '3'=no,3D. Note: If option '3' is chosen, the filename flag will be set to '-f %p_%s' to prevent overwriting files. Tip: If desire .nrrd output, select 'n'.",
      "type": "string",
      "default": "y",
      "enum": [
        "y",
        "i",
        "n",
        "3"
      ]
    },
    "compression_level": {
      "description": "Set the gz compression level. Options: 1 (fastest) to 9 (smallest), 6 (default).",
      "type": "number",
      "default": 6,
      "minimum": 1,
      "maximum": 9
    },
    "convert_only_series": {
      "description": "Selectively convert by series number - can be used up to 16 times. Options: 'all' (default), space-separated list of series numbers (e.g., '2 12 20'). WARNING: Expert Option. We trust that if you have selected this option, you know what you are asking for.",
      "type": "string",
      "default": "all"
    },
    "crop": {
      "description": "Crop 3D T1 images. Options: true, false (default).",
      "type": "boolean",
      "default": false
    },
    "dcm2niix_verbose": {
      "description": "Whether to include verbose output from dcm2niix call. Options: true, false (default).",
      "type": "boolean",
      "default": false
    },
    "debug": {
      "default": false,
      "description": "Log debug messages",
      "type": "boolean"
    },
    "decompress_dicoms": {
      "description": "Decompress DICOM files before conversion. This will perform decompression using gdcmconv and then perform the conversion using dcm2niix. Options: true, false (default).",
      "type": "boolean",
      "default": false
    },
    "filename": {
      "description": "Output filename template. Options: %a=antenna (coil) name, %b=basename, %c=comments, %d=series description, %e=echo number, %f=folder name, %i=ID of patient, %j=seriesInstanceUID, %k=studyInstanceUID, %m=manufacturer, %n=name of patient, %o=mediaObjectInstanceUID, %p=protocol, %r=instance number, %s=series number, %t=time, %u=acquisition number, %v=vendor, %x=study ID, %z=sequence name tag(0018,0024), %q sequence name tag(0018,1020). Defaults: dcm2niix tool `%f_%p_%t_%s`. Tip: A more informative filename can be useful for downstream BIDS curation by simply accessing relevant information in the extracted filename. For example, including echo number or protocol.",
      "type": "string",
      "default": "%f_%p_%t_%s"
    },
    "ignore_derived": {
      "description": "Ignore derived, localizer, and 2D images. Options: true, false (default).",
      "type": "boolean",
      "default": false
    },
    "ignore_errors": {
      "description": "Ignore dcm2niix errors and the exit status, and preserve outputs. Options: true, false (default). By default, when dcm2niix exits non-zero, outputs are not preserved. WARNING: Expert Option. We trust that if you have selected this option, you know what you are asking for.",
      "type": "boolean",
      "default": false
    },
    "lossless_scaling": {
      "description": "Losslessly scale 16-bit integers to use dynamic range. Options: 'y'=scale, 'n'=no, but unit16->int16, 'o'=original (default).",
      "type": "string",
      "default": "o",
      "enum": [
        "y",
        "n",
        "o"
      ]
    },
    "merge2d": {
      "description": "Merge 2D slices from the same series regardless of study time, echo, coil, orientation, etc. Options: 0=no, 1=yes, 2=auto (default)",
      "type": "number",
      "default": 2,
      "enum": [
        0,
        1,
        2
      ]
    },
    "output_nrrd": {
      "description": "Export as NRRD instead of NIfTI. Options: true, false (default). Tip: To export .nrrd, change the **compress_images** config option to 'n'; otherwise, the output will split into two files (.raw.gz and .nhdr).",
      "type": "boolean",
      "default": false
    },
    "philips_scaling": {
      "description": "Philips precise float (not display) scaling. Options: true (default), false.",
      "type": "boolean",
      "default": true
    },
    "remove_incomplete_volumes": {
      "description": "Remove incomplete trailing volumes for 4D scans aborted mid-acquisition before dcm2niix conversion. Options: true, false (default).",
      "type": "boolean",
      "default": false
    },
    "sanitize_filename": {
      "description": "Sanitize filename by removing invalid characters.",
      "type": "boolean",
      "default": true
    },
    "single_file_mode": {
      "description": "Single file mode, do not convert other images in the folder. Options: true, false (default).",
      "type": "boolean",
      "default": false
    },
    "tag": {
      "default": "",
      "description": "The tag to be added to one output file upon run completion.",
      "type": "string"
    },
    "text_notes_private": {
      "description": "Text notes include private patient details. Options: true, false (default).",
      "type": "boolean",
      "default": false
    }
  },
  "command": "python /flywheel/v0/run.py",
  "environment": {
    "PATH": "/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
    "FSLOUTPUTTYPE": "NIFTI_GZ",
    "FIXDCMCOMMIT": "918ee3327174c3c736e7b3839a556e0a709730c8",
    "DCMCOMMIT": "bb3a6c35d2bbac6ed95acb2cd0df65f35e79b5fb",
    "FLYWHEEL": "/flywheel/v0",
    "PWD": "/flywheel/v0",
    "PYSITE": "/usr/local/lib/python3.11/site-packages",
    "PYTHON_PIP_VERSION": "22.3.1",
    "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
    "COMMIT_SHA": "0481c74f",
    "COMMIT_REF": "main",
    "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d5cb0afaf23b8520f1bbcfed521017b4a95f5c01/public/get-pip.py",
    "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
    "LANG": "C.UTF-8",
    "PYTHON_VERSION": "3.11.2",
    "PYTHON_SETUPTOOLS_VERSION": "65.5.1",
    "BUILD_TIME": "2023-03-01T08:58:30Z",
    "SETUPTOOLS_USE_DISTUTILS": "stdlib",
    "PYTHON_GET_PIP_SHA256": "394be00f13fa1b9aaa47e911bdb59a09c3b2986472130f30aa0bfaf7f3980637",
    "EDITOR": "micro"
  }
}
